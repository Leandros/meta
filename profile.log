FUNCTION  <SNR>63_Highlight_Matching_Pair()
Called 102 times
Total time:   0.006901
 Self time:   0.006901

count  total (s)   self (s)
                              " Remove any previous match.
  102              0.000372   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
                              endif
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
  102              0.000407   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
                              endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
  102              0.000272   let c_lnum = line('.')
  102              0.000188   let c_col = col('.')
  102              0.000086   let before = 0
                            
  102              0.000230   let text = getline(c_lnum)
  102              0.001288   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
  102              0.000175   if empty(matches)
                                let [c_before, c] = ['', '']
                              else
  102              0.000355     let [c_before, c] = matches[1:2]
  102              0.000063   endif
  102              0.000990   let plist = split(&matchpairs, '.\zs[:,]')
  102              0.000264   let i = index(plist, c)
  102              0.000079   if i < 0
                                " not found, in Insert mode try character before the cursor
  102              0.000220     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
                                endif
  102              0.000064     if i < 0
                                  " not found, nothing to do
  102              0.000080       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              " Build an expression that detects whether the current cursor position is in
                              " certain syntax types (string, comment, etc.), for use as searchpairpos()'s
                              " skip argument.
                              " We match "escape" for special items, such as lispEscapeSpecial.
                              let s_skip = '!empty(filter(map(synstack(line("."), col(".")), ''synIDattr(v:val, "name")''), ' . '''v:val =~? "string\\|character\\|singlequote\\|escape\\|comment"''))'
                              " If executing the expression determines that the cursor is currently in
                              " one of the syntax types, then we want searchpairpos() to find the pair
                              " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                              " outside of the syntax types and s_skip should keep its value so we skip any
                              " matching pair inside the syntax types.
                              execute 'if' s_skip '| let s_skip = 0 | endif'
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  ProfileEnd()
Called 1 time
Total time:   0.000000
 Self time:   0.000000

count  total (s)   self (s)
                            :   profile pause
                            :   noautocmd qall!

FUNCTION  gutentags#statusline()
Called 104 times
Total time:   0.001125
 Self time:   0.001125

count  total (s)   self (s)
  104              0.000702     if !exists('b:gutentags_files')
                                    " This buffer doesn't have gutentags.
  104              0.000145         return ''
                                endif
                            
                                " Figure out what the user is customizing.
                                let l:gen_msg = 'TAGS'
                                if a:0 > 0
                                    let l:gen_msg = a:1
                                endif
                            
                                " To make this function as fast as possible, we first check whether the
                                " current buffer's tags file is 'maybe' being generated. This provides a
                                " nice and quick bail out for 99.9% of cases before we need to this the
                                " file-system to check the lock file.
                                let l:modules_in_progress = []
                                for module in keys(b:gutentags_files)
                                    let l:abs_tag_file = fnamemodify(b:gutentags_files[module], ':p')
                                    let l:progress_queue = s:maybe_in_progress[module]
                                    let l:timestamp = get(l:progress_queue, l:abs_tag_file)
                                    if l:timestamp == 0
                                        continue
                                    endif
                                    " It's maybe generating! Check if the lock file is still there... but
                                    " don't do it too soon after the script was originally launched, because
                                    " there can be a race condition where we get here just before the script
                                    " had a chance to write the lock file.
                                    if (localtime() - l:timestamp) > 1 &&!filereadable(l:abs_tag_file . '.lock')
                                        call remove(l:progress_queue, l:abs_tag_file)
                                        continue
                                    endif
                                    call add(l:modules_in_progress, module)
                                endfor
                            
                                if len(l:modules_in_progress) == 0
                                    return ''
                                endif
                            
                                " It's still there! So probably `ctags` is still running...
                                " (although there's a chance it crashed, or the script had a problem, and
                                " the lock file has been left behind... we could try and run some
                                " additional checks here to see if it's legitimately running, and
                                " otherwise delete the lock file... maybe in the future...)
                                let l:gen_msg .= '['.join(l:modules_in_progress, ',').']'
                                return l:gen_msg

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
  102   0.006901             <SNR>63_Highlight_Matching_Pair()
  104   0.001125             gutentags#statusline()
    1   0.000000             ProfileEnd()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
  102              0.006901  <SNR>63_Highlight_Matching_Pair()
  104              0.001125  gutentags#statusline()
    1              0.000000  ProfileEnd()

